apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'jacoco'

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.3"

    defaultConfig {
        applicationId "io.viesure.hiring"
        minSdkVersion 21
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        buildConfigField 'String', 'BASE_URL', '"https://viesure.free.beeceptor.com/"'
    }

    buildTypes {
        debug {
            minifyEnabled false
            applicationIdSuffix '.debug'
            versionNameSuffix '-debug'
            debuggable true
            testCoverageEnabled true
        }
        stage {
            minifyEnabled true
            applicationIdSuffix '.stage'
            versionNameSuffix '-stage'
            debuggable false
        }
        release {
            minifyEnabled true
            debuggable false
            //TODO proguard config
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8
    }

    dataBinding {
        enabled = true
    }

    android {
        packagingOptions {
            exclude 'META-INF/DEPENDENCIES'
            exclude 'META-INF/LICENSE'
            exclude 'META-INF/LICENSE.txt'
            exclude 'META-INF/license.txt'
            exclude 'META-INF/NOTICE'
            exclude 'META-INF/NOTICE.txt'
            exclude 'META-INF/notice.txt'
            exclude 'META-INF/ASL2.0'
            exclude("META-INF/*.kotlin_module")
        }
    }

    sourceSets {
        androidTest {
            java.srcDir 'src/commonTest/java'
        }

        test {
            java.srcDir 'src/commonTest/java'
        }
    }

    testOptions {
        animationsDisabled true

        unitTests {
            includeAndroidResources = true
        }
    }


}

jacoco {
    toolVersion = '0.8.5'
}
tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
}

apply plugin: 'kotlin-allopen'

allOpen {
    annotation 'io.viesure.hiring.util.OpenClass'
}


dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation "androidx.fragment:fragment-ktx:1.2.4"
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.core:core-ktx:1.2.0'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.4'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'androidx.recyclerview:recyclerview:1.1.0'
    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.2.0'
    implementation "androidx.cardview:cardview:1.0.0"

    def room_version = "2.2.5"
    implementation "androidx.room:room-runtime:$room_version"
    implementation "androidx.room:room-ktx:$room_version"
    kapt "androidx.room:room-compiler:$room_version"
    androidTestImplementation "androidx.room:room-testing:$room_version"

    def retrofit2_version = '2.8.1'
    implementation "com.squareup.retrofit2:retrofit:$retrofit2_version"
    implementation "com.squareup.retrofit2:converter-moshi:$retrofit2_version"
    implementation 'com.squareup.moshi:moshi-kotlin:1.9.2'

    implementation 'com.squareup.okhttp3:logging-interceptor:4.0.0'

    implementation 'org.kodein.di:kodein-di-generic-jvm:6.5.0'
    def glide_version = '4.9.0'
    implementation "com.github.bumptech.glide:glide:$glide_version"
    kapt "com.github.bumptech.glide:compiler:$glide_version"

    testImplementation 'junit:junit:4.13'
    testImplementation 'com.nhaarman.mockitokotlin2:mockito-kotlin:2.2.0'
    testImplementation 'androidx.arch.core:core-testing:2.1.0'
    testImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.3.4'
    testImplementation 'com.squareup.okhttp3:mockwebserver:4.6.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    androidTestImplementation 'org.mockito:mockito-android:2.25.0'
    androidTestImplementation 'com.nhaarman.mockitokotlin2:mockito-kotlin:2.2.0'
    androidTestImplementation 'androidx.arch.core:core-testing:2.1.0'
    androidTestImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.3.4'
    androidTestImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.4'
    androidTestImplementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.2.0'
    androidTestImplementation 'androidx.test:core-ktx:1.2.0'
    androidTestImplementation 'androidx.test.ext:junit-ktx:1.1.1'

    debugImplementation "androidx.fragment:fragment-testing:1.2.4"
    debugImplementation "androidx.fragment:fragment-ktx:1.3.0-alpha04"
    debugImplementation "androidx.test:core:1.2.0"
    debugImplementation "androidx.test:rules:1.2.0"
    debugImplementation "androidx.test:runner:1.2.0"
}

task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {

    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
    def debugTree = fileTree(dir: "$project.buildDir/tmp/kotlin-classes/debug", excludes: fileFilter)
    def mainSrc = "$project.projectDir/src/main/java"

    sourceDirectories = files([mainSrc])
    classDirectories = files([debugTree])
    executionData = fileTree(dir: "$buildDir", includes: [
            "jacoco/testDebugUnitTest.exec",
            "outputs/code_coverage/debugAndroidTest/connected/*.ec" //Check this path or update to relevant path
    ])
}